# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  lambda-auth

Transform:
- AWS::Serverless-2016-10-31

Parameters:
  StageName:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod

Resources:
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: Email
          AttributeType: S
      KeySchema: 
        - AttributeName: Email
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ItemAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      Auth:
        DefaultAuthorizer: TokenAuthorizer
        Authorizers:
          TokenAuthorizer:
            FunctionArn: !GetAtt TokenAuthorizerFunction.Arn
            Identity: 
              Headers:
                - auth

  GetItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/items.getItem
      Runtime: nodejs10.x
      Description: A Lambda function that returns an item.
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        ItemAPI:
          Type: Api
          Properties:
            RestApiId: !Ref ItemAPI
            Path: /item
            Method: GET

  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/registration.register
      Runtime: nodejs10.x
      Description: A Lambda function that returns an item.
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - Statement:
            Effect: Allow
            Action: 
              - ses:SendEmail
            Resource: '*'
      Environment:
        Variables:
          TABLE_NAME: !Ref UserTable
      Events:
        Register:
          Type: Api
          Properties:
            RestApiId: !Ref ItemAPI
            Path: /register
            Method: POST
            Auth:
              Authorizer: NONE

  TokenAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/tokenAuthorizer.authorize
      Runtime: nodejs10.x
      Policies:
        - AWSLambdaBasicExecutionRole

Outputs:
  ApiId:
    Description: "API ID"
    Value: !Ref ItemAPI

  ItemApiUrl:
    Description: "API endpoint URL for Prod environment"
    Value: !Sub 'https://${ItemAPI}.execute-api.${AWS::Region}.amazonaws.com/dev/'

  TableName: 
    Description: "DynamoDB new table name"
    Value: !Ref UserTable