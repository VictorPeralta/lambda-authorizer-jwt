# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  lambda-auth

Transform:
- AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs12.x
    Handler: index.handler
    Environment:
      Variables:
        TABLE_NAME: !Ref UserTable
        SENDER_EMAIL: !Ref SenderEmail
        USER_JWT_SECRET: !Ref UserJwtSecret
        EMAIL_JWT_SECRET: !Ref EmailJwtSecret
        PASSWORD_JWT_SECRET: !Ref PasswordJwtSecret



Parameters:
  StageName:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  SenderEmail:
    Type: String
  UserJwtSecret:
    Type: String
  EmailJwtSecret:
    Type: String
  PasswordJwtSecret:
    Type: String

Resources:
  UserTable :
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: Email
          AttributeType: S
      KeySchema: 
        - AttributeName: Email
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ItemAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      Auth:
        DefaultAuthorizer: TokenAuthorizer
        Authorizers:
          TokenAuthorizer:
            FunctionArn: !GetAtt TokenAuthorizerFunction.Arn
            Identity: 
              Headers:
                - auth

  GetUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/getUsersFunction/
      Description: A Lambda function that returns an item.
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        ItemAPI:
          Type: Api
          Properties:
            RestApiId: !Ref ItemAPI
            Path: /users
            Method: GET

  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/registerFunction
      Description: A Lambda function that returns an item.
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - Statement:
            Effect: Allow
            Action: 
              - ses:SendEmail
            Resource: '*'
      Events:
        Register:
          Type: Api
          Properties:
            RestApiId: !Ref ItemAPI
            Path: /register
            Method: POST
            Auth:
              Authorizer: NONE
      Environment:
        Variables:
          BASE_URL: !Sub 'https://auvectder2.execute-api.${AWS::Region}.amazonaws.com/${StageName}/'

  ConfirmEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/confirmEmailFunction
      Description: Function executed when user clicks on confirm email link.
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        ConfirmEmail:
          Type: Api
          Properties:
            RestApiId: !Ref ItemAPI
            Path: /confirmEmail/{validationToken}
            Method: GET
            Auth:
              Authorizer: NONE
  
  ForgotPasswordEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/forgotPasswordEmailFunction
      Description: Function executed when user clicks on forgot password.
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action: 
              - ses:SendEmail
            Resource: '*' 
      Events:
        SendForgotPasswordEmail:
          Type: Api
          Properties:
            RestApiId: !Ref ItemAPI
            Path: /forgotPasswordEmail
            Method: POST
            Auth:
              Authorizer: NONE
      Environment:
        Variables:
          BASE_URL: !Sub 'https://auvectder2.execute-api.${AWS::Region}.amazonaws.com/${StageName}/'

  ResetPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/resetPasswordFunction
      Description: Function executed when user clicks on reset password link from the email.
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        ResetPassword:
          Type: Api
          Properties:
            RestApiId: !Ref ItemAPI
            Path: /resetPassword/{token}
            Method: POST

  ChangePasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/changePasswordFunction
      Description: Function executed a logged in user changes their password.
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        ChangePassword:
          Type: Api
          Properties:
            RestApiId: !Ref ItemAPI
            Path: /changePassword
            Method: POST

  TokenAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/tokenAuthorizer
      Handler: index.handler
      Policies:
        - AWSLambdaBasicExecutionRole

Outputs:
  ApiId:
    Description: "API ID"
    Value: !Ref ItemAPI

  ItemApiUrl:
    Description: "API endpoint URL for Prod environment"
    Value: !Sub 'https://${ItemAPI}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/'

  TableName: 
    Description: "DynamoDB new table name"
    Value: !Ref UserTable